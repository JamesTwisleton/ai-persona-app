name: Build and Push backend to ECR and Deploy to ECS

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main

jobs:
  build-and-push-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./code/python/flask_app

    permissions:
      id-token: write
      contents: read

    steps:
    # Step 1: Checkout the repository
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Step 2: Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 3: Log in to Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1 

    # Step 4: Build, Tag, and Push Image to Amazon ECR
    - name: Build, Tag, and Push Image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.BACKEND_ECR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
                     -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    # Step 5: Deploy to Amazon ECS
    - name: Deploy to Amazon ECS
      env:
        ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
        ECS_SERVICE_NAME: ${{ secrets.BACKEND_ECS_SERVICE_NAME }}
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER_NAME \
                               --service $BACKEND_ECS_SERVICE_NAME \
                               --force-new-deployment
